# Generated by Django 4.2.7 on 2025-06-22 09:12

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, help_text='Numéro de téléphone au format international', max_length=17, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. 9 à 15 chiffres autorisés.", regex='^\\+?1?\\d{9,15}$')])),
                ('user_type', models.CharField(choices=[('CLIENT', 'Client'), ('ADMIN', 'Administrateur')], default='CLIENT', help_text="Type d'utilisateur", max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_address', models.CharField(help_text='Adresse de départ', max_length=255)),
                ('pickup_latitude', models.DecimalField(decimal_places=8, help_text='Latitude du point de départ', max_digits=10)),
                ('pickup_longitude', models.DecimalField(decimal_places=8, help_text='Longitude du point de départ', max_digits=11)),
                ('destination_address', models.CharField(help_text='Adresse de destination', max_length=255)),
                ('destination_latitude', models.DecimalField(decimal_places=8, help_text='Latitude du point de destination', max_digits=10)),
                ('destination_longitude', models.DecimalField(decimal_places=8, help_text='Longitude du point de destination', max_digits=11)),
                ('estimated_price', models.DecimalField(decimal_places=2, help_text='Prix estimé de la course', max_digits=8)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, help_text="Prix final facturé. Pour l'instant égal à l'estimated_price.", max_digits=8, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('CONFIRMED', 'Confirmée'), ('DRIVER_ASSIGNED', 'Chauffeur assigné'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée')], default='PENDING', help_text='Statut actuel de la réservation', max_length=20)),
                ('scheduled_time', models.DateTimeField(help_text='Heure prévue pour la course')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Heure de fin de course', null=True)),
            ],
            options={
                'verbose_name': 'Réservation',
                'verbose_name_plural': 'Réservations',
                'db_table': 'bookings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom complet du chauffeur', max_length=100)),
                ('phone_number', models.CharField(help_text='Numéro de téléphone unique du chauffeur', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. 9 à 15 chiffres autorisés.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(help_text='Adresse email unique du chauffeur', max_length=254, unique=True)),
                ('license_number', models.CharField(help_text='Numéro de licence VTC unique', max_length=50, unique=True)),
                ('vehicle_info', models.TextField(help_text='Informations sur le véhicule (marque, modèle, plaque, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Chauffeur',
                'verbose_name_plural': 'Chauffeurs',
                'db_table': 'drivers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Numéro de facture unique', max_length=50, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Montant HT de la facture', max_digits=8)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant de la TVA', max_digits=8)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Montant TTC de la facture', max_digits=8)),
                ('status', models.CharField(choices=[('GENERATED', 'Générée'), ('SENT', 'Envoyée'), ('PAID', 'Payée')], default='GENERATED', help_text='Statut de la facture', max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('pdf_path', models.CharField(blank=True, help_text='Chemin vers le fichier PDF de la facture', max_length=255)),
                ('booking', models.OneToOneField(help_text='Réservation associée à cette facture', on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='core.booking')),
            ],
            options={
                'verbose_name': 'Facture',
                'verbose_name_plural': 'Factures',
                'db_table': 'invoices',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='driver',
            field=models.ForeignKey(blank=True, help_text='Chauffeur assigné à la course', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='core.driver'),
        ),
        migrations.AddField(
            model_name='booking',
            name='user',
            field=models.ForeignKey(help_text='Client qui a fait la réservation', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL),
        ),
    ]
